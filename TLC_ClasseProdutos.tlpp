#include "totvs.ch"
#include "tlpp-core.th"
#include "parmtype.ch"

namespace Telecontrol.Integracao.Produto
using namespace Telecontrol.Classe

class TTLCProduto from TTLCAPICadastro

	public method CallApi() as logical
	public method New() as object

    // criar um campo para ID Telecontrol em todos os cadastros ( [x]xx_XIDTLC )

	public method Cadastra() as logical
	public method Altera() as logical
	public method Consulta() as logical

endclass


method New() as object class TTLCProduto
local aVerbos := {'POST', 'PUT', 'GET'} as array
local iVerbo as numeric
local cVerbo as character
local cArqCFG as character
local cArqSHOW as character
local cDados as character

	_Super:New('produtos', 'SB1')
	::cDescricao := "Cadastro de Produtos"

	for iVerbo := 1 to len(aVerbos)
		cVerbo := aVerbos[iVerbo]
		cArqCFG := ::oUtil:AddPathDelimiter(::cPastaCFG) + ::cAPI + '_' + cVerbo + '.json'

		if (upper(cVerbo) == 'POST') .AND. !File(cArqCFG)
			// cria um arquivo de configuração padrão para o cadastro de um produto
			cDados := '{' + CRLF
			cDados += '	"referencia": "{|| ALLTRIM(SB1->B1_COD)}",' + CRLF
			cDados += '	"descricao": "{|| ALLTRIM(SB1->B1_DESC)}",' + CRLF
			cDados += '	"codigoLinha": "{|| ALLTRIM(if(SB5->B5_COD==SB1->B1_COD,SB5->B5_CODLIN,'+"''"+'))}",' + CRLF
			cDados += '	"codigoFamilia": "{|| ALLTRIM(SB1->B1_SUBGRP)}",' + CRLF
			cDados += '	"garantia": "{|| SB1->B1_TGAR}",' + CRLF
			cDados += '	"maoDeObra": "{|| 1}",' + CRLF
			cDados += '	"maoDeObraAdmin": "{|| 1}",' + CRLF
			cDados += '	"maoDeObraTroca": "{|| 1}",' + CRLF
			cDados += '	"numeroSerieObrigatorio": "{|| .T.}",' + CRLF
			cDados += '	"ativo": "{|| ALLTRIM(SB1->B1_MSBLQL)<>' + "'1'" + '}",' + CRLF
			cDados += '	"origem": "{|| if(alltrim(SB1->B1_ORIGEM)$'+"'/0/3/4/5/8/'"+', '+"'NAC'"+', '+"'IMP'"+')}",' + CRLF
			cDados += '	"voltagem": "{|| SB1->B1_VOLT}",' + CRLF
			cDados += '	"ipi": "{|| SB1->B1_IPI}",' + CRLF
			cDados += '	"classificacaoFiscal": "{|| ALLTRIM(SB1->B1_CLASFIS)}",' + CRLF
			cDados += '	"nomeComercial": "{|| ALLTRIM(SB1->B1_DESCNF)}",' + CRLF
			cDados += '	"listaTroca": "{|| .T.}",' + CRLF
			cDados += '	"trocaObrigatoria": "{|| '+'"false"'+'}",' + CRLF
			cDados += '	"returnID": "'+"{|| cValToChar(objRetorno['produto'])}"+'"' + CRLF
			cDados += '}' + CRLF
			MemoWrite(cArqCFG, cDados)
			cDados := '' // limpa a variável para otimizar o uso de memória
		elseif (upper(cVerbo) == 'PUT') .AND. !File(cArqCFG)
			// cria um arquivo de configuração padrão para alteração do produto
			cDados := '{' + CRLF
			cDados += '	"descricao": "{|| ALLTRIM(SB1->B1_DESC)}",' + CRLF
			cDados += '	"garantia": "{|| SB1->B1_TGAR}",' + CRLF
			cDados += '	"ativo": "{|| ALLTRIM(SB1->B1_MSBLQL)<>' + "'1'" + '}",' + CRLF
			cDados += '	"origem": "{|| if(alltrim(SB1->B1_ORIGEM)$'+"'/0/3/4/5/8/'"+', '+"'NAC'"+', '+"'IMP'"+')}",' + CRLF
			cDados += '	"voltagem": "{|| SB1->B1_VOLT}",' + CRLF
			cDados += '	"ipi": "{|| SB1->B1_IPI}",' + CRLF
			cDados += '	"classificacaoFiscal": "{|| ALLTRIM(SB1->B1_CLASFIS)}",' + CRLF
			cDados += '	"nomeComercial": "{|| ALLTRIM(SB1->B1_DESCNF)}"' + CRLF
			cDados += '}' + CRLF
			MemoWrite(cArqCFG, cDados)
			cDados := '' // limpa a variável para otimizar o uso de memória
		elseif (upper(cVerbo) == 'GET') .AND. !File(cArqCFG)
			// cria um arquivo de configuração padrão para consulta do produto
			MemoWrite(cArqCFG, '{}')
		endif
	next iVerbo

	// se necessário cria o arquivo para ser usado na consulta do produto
	cArqSHOW := ::oUtil:AddPathDelimiter(::cPastaCFG) + ::cAPI + '_show.json'

	if !File(cArqSHOW)
		cDados := '{' + CRLF
		cDados += '	"referencia": {' + CRLF
		cDados += '		"referencia": "B1_COD"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"descricao": {' + CRLF
		cDados += '		"referencia": "B1_DESC"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"codigoLinha": {' + CRLF
		cDados += '		"referencia": "B5_CODLIN"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"codigoFamilia": {' + CRLF
		cDados += '		"referencia": "B1_SUBGRP"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"garantia": {' + CRLF
		cDados += '		"referencia": "B1_TGAR"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"numeroSerieObrigatorio": {' + CRLF
		cDados += '		"titulo": "{|| '+"'Série obrigatória'"+'}",' + CRLF
		cDados += '		"dica": "{|| '+"'Número de série obrigatório'"+'}",' + CRLF
		cDados += '		"tipo": "{|| '+"'L'"+'}",' + CRLF
		cDados += '		"tamanho": "{|| 1}",' + CRLF
		cDados += '		"decimal": "{|| 0}",' + CRLF
		cDados += '		"cbox": "{|| '+"''"+'}"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"ativo": {' + CRLF
		cDados += '		"titulo": "{|| '+"'Ativo'"+'}",' + CRLF
		cDados += '		"dica": "{|| '+"'Produto Ativo?'"+'}",' + CRLF
		cDados += '		"tipo": "{|| '+"'N'"+'}",' + CRLF
		cDados += '		"tamanho": "{|| 1}",' + CRLF
		cDados += '		"decimal": "{|| 0}",' + CRLF
		cDados += '		"cbox": "{|| '+"'1=Sim;2=Não'"+'}"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"origem": {' + CRLF
		cDados += '		"titulo": "{|| '+"'Origem'"+'}",' + CRLF
		cDados += '		"dica": "{|| '+"'Origem do produto'"+'}",' + CRLF
		cDados += '		"tipo": "{|| '+"'C'"+'}",' + CRLF
		cDados += '		"tamanho": "{|| 3}",' + CRLF
		cDados += '		"decimal": "{|| 0}",' + CRLF
		cDados += '		"cbox": "{|| '+"''"+'}"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"voltagem": {' + CRLF
		cDados += '		"referencia": "B1_VOLT"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"ipi": {' + CRLF
		cDados += '		"titulo": "{|| '+"'IPI'"+'}",' + CRLF
		cDados += '		"dica": "{|| '+"'Alíquota de IPI'"+'}",' + CRLF
		cDados += '		"tipo": "{|| '+"'C'"+'}",' + CRLF
		cDados += '		"tamanho": "{|| 10}",' + CRLF
		cDados += '		"decimal": "{|| 0}",' + CRLF
		cDados += '		"cbox": "{|| '+"''"+'}"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"classificacaoFiscal": {' + CRLF
		cDados += '		"referencia": "B1_CLASFIS"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"nomeComercial": {' + CRLF
		cDados += '		"referencia": "B1_DESCNF"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"trocaObrigatoria": {' + CRLF
		cDados += '		"titulo": "{|| '+"'Troca obrigatória'"+'}",' + CRLF
		cDados += '		"dica": "{|| '+"'Troca de produto obrigatória ao abrir a OS'"+'}",' + CRLF
		cDados += '		"tipo": "{|| '+"'L'"+'}",' + CRLF
		cDados += '		"tamanho": "{|| 1}",' + CRLF
		cDados += '		"decimal": "{|| 0}",' + CRLF
		cDados += '		"cbox": "{|| '+"''"+'}"' + CRLF
		cDados += '	},' + CRLF
		cDados += '	"produto": {' + CRLF
		cDados += '		"titulo": "{|| '+"'ID Telecontrol'"+'}",' + CRLF
		cDados += '		"dica": "{|| '+"'ID do produto no Telecontrol'"+'}",' + CRLF
		cDados += '		"tipo": "{|| '+"'N'"+'}",' + CRLF
		cDados += '		"tamanho": "{|| 15}",' + CRLF
		cDados += '		"decimal": "{|| 0}",' + CRLF
		cDados += '		"cbox": "{|| '+"''"+'}"' + CRLF
		cDados += '	}' + CRLF
		cDados += '}' + CRLF
		MemoWrite(cArqSHOW, cDados)
		cDados := '' // limpa a variável para otimizar o uso de memória
	endif

return Self


method CallApi(cVerbo as character, cCodRet as character, cRetorno as character, cConsulta as character) as logical class TTLCProduto
local lRet := .F. as logical

default cCodRet := '500'
default cRetorno := ''

	lRet := _Super:CallApi(cVerbo, @cCodRet, @cRetorno, cConsulta)

return lRet

method Cadastra(xRegistro as variant, cCodRet as character) as logical class TTLCProduto
local lRet := .F. as logical
local cRetorno := "" as character
local AreaSB1 := SB1->(GetArea()) as array
local AreaSB2 := SB2->(GetArea()) as array
local AreaSB5 := SB5->(GetArea()) as array

default cCodRet := '500'

	::oLOG:cClasse := 'Produto.TTLCProduto.Cadastra'

	if empty(xRegistro)
		lRet := chkFile('SB1')
	else
		if valtype(xRegistro) == "C" .AND. SB1->B1_COD <> xRegistro // chave
			SB1->(dbSetOrder(1))
			lRet := SB1->(dbSeek(xFilial() + xRegistro))
		elseif valtype(xRegistro) == "N" .AND. SB1->(Recno()) <> xRegistro // registro
			SB1->(dbGoTo(xRegistro))
			lRet := (SB1->(Recno()) == xRegistro)
		endif
	endif

	if lRet // se conseguiu posicionar no registro correto
		if SB2->B2_COD <> SB1->B1_COD // ALMOXARIFADO ????
			SB2->(dbSetOrder(1)) // B2_FILIAL, B2_COD, B2_LOCAL
			SB2->(dbSeek(xFilial() + SB1->B1_COD))
		endif
		if SB5->B5_COD <> SB1->B1_COD
			SB5->(dbSetOrder(1)) // B5_FILIAL, B5_COD
			SB5->(dbSeek(xFilial() + SB1->B1_COD))
		endif

		::nRegistro := (::cTabela)->(Recno())
		::oLOG:nRegistro := (::cTabela)->(Recno())
		lRet := ::CallApi('post', @cCodRet, @cRetorno)
	else
		// LOG
		if !IsBlind()
			FWAlertError('Produto não encontrado no Protheus', 'Cadastrar produto no Telecontrol')
		endif
	endif

	SB1->(RestArea(AreaSB1))
	SB2->(RestArea(AreaSB2))
	SB5->(RestArea(AreaSB5))

return lRet


method Altera(xRegistro as variant, cCodRet as character) as logical class TTLCProduto
local lRet := .F. as logical
local cRetorno := "" as character
local AreaSB1 := (::cTabela)->(GetArea()) as array

default cCodRet := '500'

	::oLOG:cClasse := 'Produto.TTLCProduto.Altera'

	if empty(xRegistro)
		lRet := chkFile('SB1')
	else
		if valtype(xRegistro) == "C" .AND. (::cTabela)->B1_COD <> xRegistro // chave
			(::cTabela)->(dbSetOrder(1))
			lRet := (::cTabela)->(dbSeek(xFilial() + xRegistro))
		elseif valtype(xRegistro) == "N" .AND. (::cTabela)->(Recno()) <> xRegistro // registro
			(::cTabela)->(dbGoTo(xRegistro))
			lRet := ((::cTabela)->(Recno()) == xRegistro)
		endif
	endif

	if lRet // se conseguiu posicionar no registro correto
		::nRegistro := (::cTabela)->(Recno())
		::oLOG:nRegistro := (::cTabela)->(Recno())
		lRet := ::CallApi('put', @cCodRet, @cRetorno, SB1->B1_COD)
	else
		// LOG
		if !isBlind()
			FWAlertError('Produto não encontrado no Protheus', 'Consulta produto no Telecontrol')
		endif
	endif

	RestArea(AreaSB1)

return lRet


method Consulta(cCodigo as character, cCodRet as character, cRetorno as character, lMostraMsg as logical, lMostraReg as logical) as logical class TTLCProduto
local lRet := .F. as logical

default cCodigo := (::cTabela)->B1_COD
default cCodRet := '500'
default lMostraMsg := .T.
default lMostraReg := .F.

	::oLOG:cClasse := 'Produto.TTLCProduto.Consulta'

	cRetorno := ''

	if !empty(cCodigo)
		(::cTabela)->(dbSetOrder(1)) // B1_FILIAL + B1_COD
		lRet := (::cTabela)->(dbSeek(xFilial() + cCodigo))

		if lRet // se conseguiu posicionar no registro correto
			::nRegistro := (::cTabela)->(Recno())
			::oLOG:nRegistro := (::cTabela)->(Recno())
			lRet := _Super:Consulta(cCodigo, @cCodRet, @cRetorno, lMostraMsg, lMostraReg)
		else
			// LOG
			if !IsBlind() .AND. lMostraMsg
				FWAlertError('Produto não encontrado no Protheus', 'Consultar produto no Telecontrol')
			endif
		endif

	else
		if !IsBlind() .AND. lMostraMsg
			FWAlertError('Para efetuar a consulta é necessário informar o código do produto Protheus', 'Consultar produto no Telecontrol')
		endif
	endif

return lRet


user function testepr(tipo)//Telecontrol.Integracao.Produto.u_testepr(1)
local oAPIProduto := TTLCProduto():New()
local lRet := .F.
local cRetorno as character
default tipo = 1

	chkFile('SB1')

	if tipo == 1
		lRet := oAPIProduto:Cadastra()
	else
		lRet := oAPIProduto:Consulta(,,@cRetorno,,.T.)
	endif

	if lRet
		if tipo == 1
			alert('tudo certo')
		else
//			Alert(varinfo('Retorno', cRetorno))
			Alert(cRetorno)
		endif
	else
		alert('deu pau!')
	endif

return
